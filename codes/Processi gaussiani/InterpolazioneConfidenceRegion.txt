  import numpy as np
  from matplotlib import pyplot as plt
  from sklearn.gaussian_process import GaussianProcessRegressor
  from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C

  np.random.seed(1)

  def f(x):
      """The function to predict."""
      return x * np.sin(x)

  X = np.atleast_2d([1., 3., 5., 6., 7., 8.]).T

  # Observations
  y = f(X).ravel()

  # Mesh the input space
  x = np.atleast_2d(np.linspace(0, 10, 1000)).T

  # Instantiate a Gaussian Process model
  kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))
  gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)

  # Fit to data
  gp.fit(X, y)

  # Make the prediction
  y_pred, sigma = gp.predict(x, return_std=True)

  plt.figure(figsize=(10, 5))
  n_samples=20
  y_samples = gp.sample_y(x, n_samples)
  for idx, single_prior in enumerate(y_samples.T):
    plt.plot(x, single_prior, linestyle=":", alpha=1, linewidth=1.7)

  plt.plot(x, y_pred, 'b-', label=u'Media')
  plt.fill(np.concatenate([x, x[::-1]]), np.concatenate([y_pred - 1.9600 * sigma, (y_pred + 1.9600 * sigma)[::-1]]), alpha=.35, fc='b', ec='None', label='95% intervallo confidenza')
  plt.plot(X, y, 'r.', markersize=13, label=u'Osservazioni')
  plt.ylim(-6.2, 9.9)
  plt.xlim(-0.1, 10.1)
  plt.legend(loc='upper left')